name: CI Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - "*.md"
      - "docs/**"
      - ".gitignore"
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - "*.md"
      - "docs/**"
      - ".gitignore"

env:
  PYTHON_VERSION: "3.10"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort bandit safety pytest pytest-cov

      - name: Code formatting check (Black)
        run: |
          black --check --diff app/
          if [ $? -ne 0 ]; then
            echo "::error::Code formatting issues found. Run 'black app/' to fix."
            exit 1
          fi

      - name: Import sorting check (isort)
        run: |
          isort --check-only --diff app/
          if [ $? -ne 0 ]; then
            echo "::error::Import sorting issues found. Run 'isort app/' to fix."
            exit 1
          fi

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Security check with bandit
        run: |
          bandit -r app/ -f json -o bandit-report.json || true
          bandit -r app/ --severity-level medium --confidence-level medium

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json

  # Docker Build and Security Scan
  docker-build:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
